# ------------------------------------------------------------------------------
# Proximus EBU Kiosk - Docker Template v1.0
#
# 31/08/2017 - Vincent Dupont (vidupont@gmail.com)
#
# The Kiosk User Interface is based on Framer / Nodejs
# PlatformIO is needed for remote arduino firmware updates
#
# Base Image :
#  - resin/%%RESIN_MACHINE_NAME%%-node:slim : Debian + NodeJs Image
#
# Dependencies:
# - omxplayer : read local videos
# - platformio : for arduino remote updates / firmware load (remote agent)
# - wifi-connect : setup wifi hotspot with local configuration
#
# Frameworks:
# - Nodejs : Javascript engine
# - Node-Red : flows based scripting engine
# -
#
# Folders:
# - /app : root folder for kiosk apps
# - /app/nodejs : root folder for nodejs framework
# - /app/node-red : root folder for node-red framework
# - /app/backend : root folder for apps backend / scripts
# - /app/frontend : root folder for apps frontend
# - /scripts : various scripts (at boot time)
# - /data/flows : persistent node-red flows
# - /data/medias : medias files cache
#
# GitHub:
#
# - https://github.com/vidupont/ebu-kiosk-v1 : the main repository
# - https://github.com/vidupont/ebu-kiosk-arduino-v1 : arduino sketch
# - https://github.com/vidupont/ebu-medias : media files to be cached
#
# Notes:
# - Start with ResinIO base image 'slim', might be interesting to optimise the size
# - Do we really need the lxde or fluxbox if we run Chromium in kiosk mode
# - DBUS ... error message from Chromium , to be checked
# - Redo touchscreen calibration
#
# Info: Resin Base Images : https://docs.resin.io/runtime/resin-base-images/
# ------------------------------------------------------------------------------

# *** Base Image from Resin repository ***
FROM resin/%%RESIN_MACHINE_NAME%%-debian:stretch AS builder

# *** Base folders ***
ENV root_app /app
ENV root_nodejs /app/nodejs
ENV root_nodered /app/nodered
ENV root_platformio /app/platformio
ENV root_backend /app/backend
ENV root_frontend /app/frontend
ENV root_scripts /scripts
ENV root_nodered_data /data/nodered
ENV root_medias /data/medias
ENV root_framework_semanticui /


# *** Build the first image layer ***

# Add apt-get packages
RUN apt-get update && apt-get install -y --no-install-recommends \
  apt-utils \
  apt-transport-https \
  wget

# Add Nodejs & npm
RUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
RUN apt-get update && apt-get install -y --no-install-recommends \
  nodejs \
  build-essential


# --- Install the Package.json : backend services
WORKDIR ${root_app}
COPY /config/package.json .

# --- Install node-red and required nodes
WORKDIR ${root_app}

# - Added into package.json
#RUN JOBS=MAX npm install --production --silent \
#  serialport \
#  node-red node-red-contrib-resinio \
#  node-red-dashboard \
#  node-red-contrib-spark \
  #node-red-contrib-gpio \
#  node-red-contrib-blynk-websockets \
#  node-red-node-arduino

# --- Install Semantic UI ---
#RUN JOBS=MAX npm install -g --production --silent gulp
#RUN JOBS=MAX npm install -g --production --silent semantic-ui --save

# --- Install additional packages from json file ---
RUN JOBS=MAX npm install

# --- Install ElectronJS ---
RUN npm install electron --save-exact --save-dev

# --- Clean npm cache and tmp files
RUN	npm cache clean --force && rm -rf /tmp/*

# *** Local final Image from Resin repository ***
# FROM resin/%%RESIN_MACHINE_NAME%%-node:slim
# COPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules



# *** Install additional packages ***
#COPY /config/raspi-ui.list /etc/apt/sources.list.d
COPY /config/google-chrome.list /etc/apt/sources.list.d
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

RUN apt-get update && apt-get install -y --no-install-recommends \
  git-core \
	python \
	mc \
  pciutils \
  dbus \
  #bluetooth \
  bluez \

# 1/ For Wifi-connect
#  dnsmasq \
#  hostapd \
#  iproute2 \
#  iw \
#  libdbus-1-dev \
#  libexpat-dev \
#  rfkill \

# 2/ Minimum Xorg environment
	 xorg
#	 lxde \
#	 fluxbox \

# 3/ Chromium
#	lsb-release
#	chromium-browser \
#	rpi-chromium-mods \
# 4/ VLC
#VLC



# Install Google Chrome
RUN apt-get install google-chrome-stable --force-yes

# --- Clean apt cache and tmp files
RUN apt-get clean && rm -rf /var/lib/apt/lists/*


# *** Copy the Container folders ***
WORKDIR /
#RUN mkdir -p ${root_backend}
COPY /scripts ${root_scripts}
COPY /services/node-red ${root_nodered}
COPY /applications ${root_app}

# --- Touchscreen calibration ---
COPY ./config/99-calibration.conf /usr/share/X11/xorg.conf.d


# *** Install PlatformIO (Arduino Remote Agent) ***
WORKDIR ${root_platformio}
RUN python ${root_scripts}/get-platformio.py
COPY /services/platformio/platformio.service /etc/systemd/system/platformio.service


# *** Setup X Environment ***


# *** Setup Kiosk front-end User ***
RUN useradd -d /home/kiosk -g users -m kiosk

# *** Enable Systemd ***
ENV INITSYSTEM on

# *** Install and enable Services ***
RUN systemctl enable /etc/systemd/system/platformio.service


# --- Change Workdir ---
WORKDIR /

# --- RUN the Main Application ---
CMD ["bash", ""]
