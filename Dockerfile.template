# ------------------------------------------------------------------------------
# Proximus EBU Kiosk - Docker Template v1.0
#
# 31/08/2017 - Vincent Dupont (vidupont@gmail.com)
#
# The Kiosk User Interface is based on Framer / Nodejs
# PlatformIO is needed for remote arduino firmware updates
#
# Base Image :
#  - resin/%%RESIN_MACHINE_NAME%%-node:slim : Debian + NodeJs Image
#
# Dependencies:
# - omxplayer : read local videos
# - platformio : for arduino remote updates / firmware load (remote agent)
# - wifi-connect : setup wifi hotspot with local configuration
#
# Frameworks:
# - Nodejs : Javascript engine
# - Node-Red : flows based scripting engine
# -
#
# Folders:
# - /app : root folder for kiosk apps
# - /app/nodejs : root folder for nodejs framework
# - /app/node-red : root folder for node-red framework
# - /app/backend : root folder for apps backend / scripts
# - /app/frontend : root folder for apps frontend
# - /scripts : various scripts (at boot time)
# - /data/flows : persistent node-red flows
# - /data/medias : medias files cache
#
# GitHub:
#
# - https://github.com/vidupont/ebu-kiosk-v1 : the main repository
# - https://github.com/vidupont/ebu-kiosk-arduino-v1 : arduino sketch
# - https://github.com/vidupont/ebu-medias : media files to be cached
#
# Notes:
# - Start with ResinIO base image 'slim', might be interesting to optimise the size
# - Do we really need the lxde or fluxbox if we run Chromium in kiosk mode
# - DBUS ... error message from Chromium , to be checked
# - Redo touchscreen calibration
#
# Info: Resin Base Images : https://docs.resin.io/runtime/resin-base-images/
# ------------------------------------------------------------------------------

# --== Base Image from Resin repository ==--
FROM resin/%%RESIN_MACHINE_NAME%%-debian:stretch AS builder



# --== Set Environment Variables ==--
# 0.Variables from Resin Env with default value (if not present)


# 1.Base folders ***
ENV root_app /app
ENV root_data /data
ENV root_nodejs ${root_app}/nodejs
ENV root_nodered ${root_app}/nodered
ENV root_platformio ${root_app}/platformio
ENV root_backend ${root_app}/backend
ENV root_frontend ${root_app}/frontend
ENV root_scripts /scripts
ENV root_nodered_data ${root_data}/nodered
ENV root_medias ${root_data}/medias
#ENV root_framework_semanticui /
ENV root_arduino ${root_platformio}/boards

# 2. Other variables
# --- Connect DBUS to Host : do I need this ?
# ENV DBUS_SYSTEM_BUS_ADDRESS=unix:path=/host/run/dbus/system_bus_socket


# --== Copy scripts and configuration files
# 1. Package.json
WORKDIR ${root_app}
COPY /config/package.json .



# --== Install the packages required into first layer image ==--
# 1. APT packages & utils
RUN apt-get update && apt-get install -y --no-install-recommends \
  apt-utils \
  apt-transport-https \
  wget

# 2. Set additional repositories
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
COPY /config/google-chrome.list /etc/apt/sources.list.d

# 3. Google Chrome
RUN apt-get install google-chrome-stable --force-yes

# 4. Nodejs and NPM
RUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
RUN apt-get update && apt-get install -y --no-install-recommends \
  nodejs \
  build-essential



# --== Nodejs Packages ==--
# 1. Load the modules from package.json
WORKDIR ${root_app}
RUN JOBS=MAX npm install --silent \

# 2. Node-Red modules
#RUN JOBS=MAX npm install --production --silent \
  serialport \
  node-red node-red-contrib-resinio \
  node-red-dashboard \
  node-red-contrib-spark \
  node-red-contrib-blynk-websockets \
  node-red-node-arduino \

# 3. Electronjs : installed via package.json
#RUN npm install electron --save-exact --save-dev

# --- Install Semantic UI ---
#RUN JOBS=MAX npm install -g --production --silent gulp
#RUN JOBS=MAX npm install -g --production --silent semantic-ui --save


# 6. Clean npm cache and tmp files
RUN	npm cache clean --force && rm -rf /tmp/*



# --== Create the second layer image with copy of compiled components (reduce size)
# ** TBD : Check what need to be copied **
# FROM resin/%%RESIN_MACHINE_NAME%%-node:slim
# COPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules



# --== Install additional packages ==--
# 1. Utilities
RUN apt-get update && apt-get install -y --no-install-recommends \
  git-core \
	python \
	mc \
  pciutils \

# 2. Core Services
  #dbus \

# 2. Bluetooth support
  #bluetooth \
  bluez \

# 3. Libraries (to be checked, remove unecessary later)
  libdbus-1-dev \
  libgtk2.0-dev \
  libnotify-dev \
  libgnome-keyring-dev \
  libgconf2-dev \
  libasound2-dev \
  libcap-dev \
  libcups2-dev \
  libxtst-dev \
  libxss1 \
  libnss3-dev \
  libexpat-dev \


# 4. Xorg & Windows Manager
  xserver-xorg-core \
  xserver-xorg-input-all \
  xserver-xorg-video-fbdev \
  xorg \
  fbset \
  fluxbox \

# --==  Clean Caches and TMP files ==--
RUN apt-get clean && rm -rf /var/lib/apt/lists/*


# --== Copy Applications & Services folders ==--
WORKDIR /
#RUN mkdir -p ${root_backend}

# 1. Initialisation scripts (run by start-main.sh)
COPY /scripts ${root_scripts}

# 2. Services
COPY /services/node-red ${root_nodered}

# 3. Applications
COPY /applications ${root_app}

# 4. Arduino Sketches
COPY /arduino



# --- Bluetooth Keyboard ---
COPY /services/keyboard.conf /etc/bluetooth
COPY /services/keyboard.service /etc/systemd/system/

# --- Touchscreen calibration ---
#COPY ./config/99-calibration.conf /usr/share/X11/xorg.conf.d


# *** Install PlatformIO (Arduino Remote Agent) ***
WORKDIR ${root_platformio}
RUN python ${root_scripts}/get-platformio.py
COPY /services/platformio/platformio.service /etc/systemd/system/platformio.service


# *** Load Arduino Sketeches ***



# *** Setup X Environment ***


# *** Setup Kiosk front-end User ***
RUN useradd -d /home/kiosk -g users -m kiosk

# *** Enable Systemd ***
ENV INITSYSTEM on

# *** Install and enable Services ***
RUN systemctl enable /etc/systemd/system/platformio.service
RUN systemctl enable /etc/systemd/system/keyboard.service

# --- Change Workdir ---
WORKDIR /

# --- RUN the Main Application ---
CMD ["bash", "/scripts/start-main.sh"]
