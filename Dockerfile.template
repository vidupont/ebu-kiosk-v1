# ------------------------------------------------------------------------------
# Proximus EBU Kiosk - Docker Template v1.0
#
# 01/08/2017 - Vincent Dupont (vidupont@gmail.com)
#
# The Kiosk User Interface is based on Framer / Nodejs
# PlatformIO is needed for remote arduino firmware updates
#
# Base Image :
#  - resin/%%RESIN_MACHINE_NAME%%-node:slim : Debian + NodeJs Image
#
# Dependencies:
# - omxplayer : read local videos
# - platformio : for arduino remote updates / firmware load (remote agent)
# - wifi-connect : setup wifi hotspot with local configuration
#
# Frameworks:
# - Nodejs : Javascript engine
# - Node-Red : flows based scripting engine
# - Electronjs : desktop like app framework
#
# GitHub:
#
# - https://github.com/vidupont/ebu-kiosk-v1 : the main repository
# - https://github.com/vidupont/ebu-kiosk-arduino-v1 : arduino sketch
# - https://github.com/vidupont/ebu-medias : media files to be cached
#
# Info: Resin Base Images : https://docs.resin.io/runtime/resin-base-images/
# ------------------------------------------------------------------------------

# *** Base Image from Resin repository ***
FROM resin/%%RESIN_MACHINE_NAME%%-node AS builder


# *** Build the first image layer ***

# --- Install NodeJs / ElectronJS
WORKDIR /usr/src/app/
COPY /applications/package.json ./

RUN JOBS=MAX npm install --unsafe-perm --production -g \
	&& npm cache verify && node_modules/.bin/electron-rebuild

# --- Install node-red and Nodes
WORKDIR /usr/src/app
RUN JOBS=MAX npm install -g --production --silent \
  serialport \
  node-red node-red-contrib-resinio \
  node-red-dashboard \
  node-red-contrib-spark \
  node-red-contrib-gpio \
  node-red-contrib-blynk-websockets \
  # node-red-node-arduino \
  && \
  npm cache clean --force && rm -rf /tmp/*

# *** Local final Image from Resin repository ***
FROM resin/%%RESIN_MACHINE_NAME%%-node:slim
COPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules

# --- Install the dependencies ---
RUN apt-get update && apt-get install -y \
  apt-utils \
  git-core \
  make gcc g++ python \

# 1/ For Wifi-connect
  dnsmasq \
  hostapd \
  iproute2 \
  iw \
  libdbus-1-dev \
  libexpat-dev \
  rfkill \

# 2/ coffee-script
  coffeescript \

# 3/ For ElectronJS
 clang \
 xserver-xorg-core \
 xserver-xorg-input-all \
 xserver-xorg-video-fbdev \
 xorg \
 xinput-calibrator \
 libdbus-1-dev \
 libgtk2.0-dev \
 libnotify-dev \
 libgnome-keyring-dev \
 libgconf2-dev \
 libasound2-dev \
 libcap-dev \
 libcups2-dev \
 libxtst-dev \
 libxss1 \
 libnss3-dev \
 fluxbox \
 libsmbclient \
 libssh-4 \
 fbset \
 libexpat-dev \

# 4/ OMXPlayer
  omxplayer


# Does some cleaning here
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# --- Copy the Container folders ---
WORKDIR /
COPY ./applications /usr/src/app
COPY ./startup /STARTUP
COPY ./services /SERVICES
#COPY ./arduino /ARDUINO
COPY ./configs/99-calibration.conf /usr/share/X11/xorg.conf.d
COPY ./configs/kioskflows.json /SERVICES/node-red

WORKDIR /usr/src/app/
COPY /applications/package.json ./


# --- Install PlatformIO (Arduino Remote Agent) ---
WORKDIR /STARTUP
RUN python /STARTUP/get-platformio.py

# --- Setup the X Server and Windows manager ---
RUN mkdir ~/.fluxbox
RUN echo "xset s off" > ~/.fluxbox/startup && echo "xserver-command=X -s 0 dpms" >> ~/.fluxbox/startup
RUN echo "#!/bin/bash" > /etc/X11/xinit/xserverrc \
 && echo "" >> /etc/X11/xinit/xserverrc \
 && echo 'exec /usr/bin/X -s 0 dpms -nolisten tcp "$@"' >> /etc/X11/xinit/xserverrc

# --- Install npm modules for the application ---
# RUN npm install electron -g
# RUN npm install electron-rebuild -g



# --- Perform last upgrade before running ---
# RUN apt-get upgrade

# --- Enable Systemd ---
ENV INITSYSTEM on

# --- Install and enable Services ---
# 1. PlatformIO remote Agent
COPY /services/platformio/platformio.service /etc/systemd/system/platformio.service
RUN systemctl enable /etc/systemd/system/platformio.service


# --- Change Workdir ---
WORKDIR /

# --- RUN the Main Application ---
CMD ["bash", "./STARTUP/start.sh"]
